




-------Initiating Semantic Analysis--------




label = S
label = P
label = func_declaration
func_dec
leaving func = stmt_list
label = stmt_list
label = single_stmt
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = array
cur scope cnt = 5
in init_decl_list label = ;
label = stmt_list
label = single_stmt
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = i
cur scope cnt = 6
in init_decl_list label = ;
label = stmt_list
label = single_stmt
label = for_stmt
for_stmt
Childcount = 0 entrycount = 6
func a b c array i 
----
label = for
label = (
label = for_declare
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = dx
cur scope cnt = 1
in init_decl_list label = ,
in init_decl_list label = init_dec
id added = dy
cur scope cnt = 2
in init_decl_list label = ;
label = expr
label = expression_stmt
expr
label = ;
label = for_assign
label = assign_stmt
assgn
checking for dx
label = )
label = stmt_list
label = single_stmt
label = compound_stmt
compound
label = stmt_list
label = single_stmt
label = for_stmt
for_stmt
Childcount = 0 entrycount = 0

----
label = for
label = (
label = for_declare
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = y
cur scope cnt = 1
in init_decl_list label = ,
in init_decl_list label = init_dec
id added = k
cur scope cnt = 2
in init_decl_list label = ;
label = expr
label = expression_stmt
expr
label = ;
label = for_assign
label = assign_stmt
assgn
checking for y
label = ,
label = for_assign
label = assign_stmt
assgn
checking for k
label = )
label = stmt_list
label = single_stmt
label = compound_stmt
compound
label = stmt_list
label = single_stmt
label = expr
label = expression_stmt
expr
label = ;
label = stmt_list
label = single_stmt
label = return_stmt
label = return
label = expr
label = expression_stmt
expr
label = ;
label = P
label = func_declaration
func_dec
leaving func = stmt_list
label = stmt_list
label = single_stmt
label = if_stmt
label = if
label = (
label = expression_stmt
expr
label = )
label = single_stmt
label = expr
label = expression_stmt
expr
label = ;
label = else_clause
label = stmt_list
label = single_stmt
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = round
cur scope cnt = 5
in init_decl_list label = ;
label = stmt_list
label = single_stmt
label = return_stmt
label = return
label = expr
label = expression_stmt
expr
label = ;
label = main_func
label = int
label = main
label = (
label = )
label = compound_stmt
compound
label = stmt_list
label = single_stmt
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = x
cur scope cnt = 1
in init_decl_list label = ;
label = stmt_list
label = single_stmt
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = float
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = ans
cur scope cnt = 2
in init_decl_list label = ;
label = stmt_list
label = single_stmt
label = print_stmt
label = printf
label = (
label = string
label = "Number = %d"
label = ,
label = print_params
label = id
label = testInteger
label = )
label = ;
label = stmt_list
label = single_stmt
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = a
cur scope cnt = 3
in init_decl_list label = ;
label = stmt_list
label = single_stmt
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = d
cur scope cnt = 4
in init_decl_list label = ;
label = stmt_list
label = single_stmt
label = switch_stmt
label = switch
label = (
label = expression_stmt
expr
label = )
label = {
label = case_list_def
label = case_list
label = case_st
label = case
label = expression_stmt
expr
label = :
label = stmt_list
label = single_stmt
label = declaration
dec
in init_decl_list label = declaration
in init_decl_list label = int
in init_decl_list label = init_dec_list
in init_decl_list label = init_dec
id added = cur
cur scope cnt = 5
in init_decl_list label = ;
label = stmt_list
label = single_stmt
label = while_stmt
label = while
label = (
label = expression_stmt
expr
label = )
label = stmt_list
label = single_stmt
label = compound_stmt
compound
label = stmt_list
label = single_stmt
label = expr
label = expression_stmt
expr
label = ;
label = stmt_list
label = single_stmt
label = jump_stmt
label = break
label = ;
label = default_stmt
label = default
label = :
label = stmt_list
label = single_stmt
label = expr
label = expression_stmt
expr
label = ;
label = }
label = stmt_list
label = single_stmt
label = compound_stmt
label = {
label = }
label = stmt_list
label = single_stmt
label = return_stmt
label = return
label = expr
label = expression_stmt
expr
label = ;



----Semantic Analysis done----


Childcount = 3 entrycount = 0

----
Childcount = 1 entrycount = 6
func a b c array i 
----
Childcount = 1 entrycount = 2
dx dy 
----
Childcount = 1 entrycount = 0

----
Childcount = 1 entrycount = 2
y k 
----
Childcount = 0 entrycount = 0

----
Childcount = 0 entrycount = 5
area_round_off radius pi c round 
----
Childcount = 1 entrycount = 5
x ans a d cur 
----
Childcount = 0 entrycount = 0

----
